# 0efaea8d94254f08a75eaabebb8a68f6   appkey
import random

import requests
import time
import uuid
import base64
import re
import json
from PIL import Image
from tools import get_distance, get_slide_track, AES_Encryption


appKey = "0efaea8d94254f08a75eaabebb8a68f6"
sessionKey =  uuid.uuid1().__str__()
time_ = str(int(time.time()*1000))
headers = {
    "Connection": "keep-alive",
    "Pragma": "no-cache",
    "Cache-Control": "no-cache",
    "sec-ch-ua": "\"Chromium\";v=\"21\", \" Not;A Brand\";v=\"99\"",
    "sec-ch-ua-mobile": "?0",
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36",
    "sec-ch-ua-platform": "\"Windows\"",
    "Accept": "*/*",
    "Sec-Fetch-Site": "cross-site",
    "Sec-Fetch-Mode": "no-cors",
    "Sec-Fetch-Dest": "script",
    "Referer": "https://pbservice.moc.oocl.com/",
    "Accept-Language": "zh-CN,zh;q=0.9"
}
url = "https://cs-captcha-public.cargosmart.com/captcha/public/get"
params = {
    "appKey": appKey,
    "captchaType": "blockPuzzle",
    "sessionKey": sessionKey,
    # "jsonpCallback": "jQuery18005505968184149597_1688345805558",
    "_": time_
}
res = requests.get(url, headers=headers, params=params).text
res = re.findall('\((.*?)\)', res)[0]
res_item = json.loads(res)
error = res_item['error']
if error:
    print('请求图片错误')
repData = res_item['repData']
secretKey = repData['secretKey']
originalImageBase64 = repData['originalImageBase64']
jigsawImageBase64 = repData['jigsawImageBase64']
token = repData['token']
# 保存图片:
with open('bg.png', 'wb')as f1, open('slice.png', 'wb')as f2:
    f1.write(base64.b64decode(originalImageBase64))
    f2.write(base64.b64decode(jigsawImageBase64))

f1 = Image.open('bg.png').resize((323, 153))
f1.save('bg.png')
f2 = Image.open('slice.png').resize((48, 153))
f2.save('slice.png')

# 获取滑块距离
value = get_distance('bg.png', 'slice.png', im_write=True)
print(value)


start_time = int(time.time()*1000)
# 220.14876017214772
mouseMovementTrackBeforeSlide = [
    766,
    765,
    764,
    763,
    762,
    761,
    760,
    759,
    757,
    756,
    754,
    753,
    752,
    751,
    750,
    748,
    746,
    745,
    739,
    725,
    701,
    668,
    608,
    597,
    581,
    567,
    555,
    544,
    535,
    526,
    521,
    518,
    515,
    511,
    503,
    495,
    488,
    481,
    476,
    472,
    469,
    467,
    467,
    466,
    465,
    464,
    464,
    464,
    466,
    470,
    474,
    475,
    477,
    477,
    478,
    479,
    483,
    486,
    487,
    514,
    741,
    793,
    781,
    754,
    737,
    727,
    722,
    719,
    717,
    714,
    712,
    711,
    710,
    705,
    705,
    709,
    714,
    723,
    735,
    746,
    756,
    764,
    766,
    766,
    766,
    764,
    760,
    757,
    754,
    754,
    753,
    751,
    749,
    746,
    744,
    742,
    739,
    738,
    737,
    736,
    735,
    730,
    722,
    711,
    696,
    677,
    667,
    661,
    657,
    654,
    654,
    698,
    698,
    698,
    698,
    701,
    702,
    703,
    397,
    372,
    357,
    348,
    344,
    343,
    342,
    343,
    343,
    343,
    343,
    343,
    344,
    344,
    345,
    345,
    347,
    348,
    351,
    353,
    356,
    356,
    357,
    360,
    364,
    370,
    378,
    387,
    393,
    403,
    412,
    639,
    629,
    618,
    606,
    595,
    582,
    573,
    562,
    556,
    552,
    547,
    544,
    541,
    537,
    535,
    531,
    528,
    526,
    523,
    522,
    521,
    520,
    520,
    519,
    523,
    526,
    529,
    531,
    534,
    536,
    537,
    537,
    538,
    539,
    541,
    543,
    546,
    547,
    548,
    549,
    549,
    550,
    551,
    553,
    554,
    556,
    558,
    561,
    564,
    567,
    570,
    574,
    577,
    582,
    586,
    593,
    603,
    614,
    627,
    638,
    649,
    659,
    671,
    683,
    696,
    710,
    726,
    743,
    764,
    785,
    513,
    513,
    511,
    510,
    509,
    509,
    508,
    507,
    507,
    506,
    506,
    504,
    503,
    501,
    500,
    500,
    499,
    498,
    497,
    496,
    496,
    495,
    494,
    494,
    494,
    494,
    494,
    496,
    498,
    499,
    500,
    501,
    502,
    503,
    503,
    504,
    505,
    506,
    507,
    576,
    551,
    535,
    523,
    513,
    508,
    505,
    504,
    502,
    502,
    500,
    498,
    496,
    492,
    486,
    479,
    472,
    466,
    460,
    455,
    453,
    451,
    447,
    445,
    443,
    440,
    437,
    435,
    431,
    427,
    422,
    412,
    404,
    398,
    391,
    383,
    379,
    372,
    366,
    362,
    360,
    357,
    356,
    355,
    354,
    351,
    347,
    344,
    340,
    338,
    334,
    331,
    329,
    327,
    325,
    324,
    322,
    320,
    318,
    316,
    312,
    307,
    303,
    299,
    297,
    294,
    293,
    291,
    289,
    287,
    286,
    285,
    284,
    283,
    283,
    282,
    281,
    280,
    280,
    279,
    278,
    277,
    276,
    274,
    272,
    269,
    267,
    266,
    264,
    263,
    261,
    261,
    260
]
new_track_list = []
track_list = get_slide_track(value, start_time)
stop_time = track_list[-1][-1]
end_x = track_list[-1][0]
point = {
    'x': end_x,
    'y': 5
}
point_dumps = json.dumps(point)
pointJson = AES_Encryption(text=point_dumps, secret_key=secretKey)
for track in track_list:
    track_item = {
        'x': track[0],
        'y': track[1],
        'timestamp': track[2]
    }
    new_track_list.append(track_item)
new_track_dumps = json.dumps(new_track_list)
mousePoint = AES_Encryption(text=new_track_dumps, secret_key=secretKey)

my_mouseMovement = random.sample(mouseMovementTrackBeforeSlide, 10)
my_mouseMovement_dumps = json.dumps(my_mouseMovement)
manualMovementMousePoint = AES_Encryption(text=my_mouseMovement_dumps, secret_key=secretKey)


headers = {
    "Connection": "keep-alive",
    "Pragma": "no-cache",
    "Cache-Control": "no-cache",
    "sec-ch-ua": "\"Chromium\";v=\"21\", \" Not;A Brand\";v=\"99\"",
    "Accept": "*/*",
    "Content-Type": "application/json;charset=UTF-8",
    "sec-ch-ua-mobile": "?0",
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36",
    "sec-ch-ua-platform": "\"Windows\"",
    "Origin": "https://pbservice.moc.oocl.com",
    "Sec-Fetch-Site": "cross-site",
    "Sec-Fetch-Mode": "cors",
    "Sec-Fetch-Dest": "empty",
    "Referer": "https://pbservice.moc.oocl.com/",
    "Accept-Language": "zh-CN,zh;q=0.9"
}
url = "https://cs-captcha-public.cargosmart.com/captcha/public/check"
params = {
    "appKey": appKey
}
data = {
    "captchaType": "blockPuzzle",
    "pointJson": pointJson,
    "token": token,
    "sessionKey": sessionKey,
    "mousePoint": mousePoint,
    "startTime": start_time,
    "endTime": stop_time,
    "manualMovementMousePoint": manualMovementMousePoint
}
data = json.dumps(data, separators=(',', ':'))
response = requests.post(url, headers=headers, params=params, data=data)

print(response.text)
print(response)


